require.config({"config": {
        "jsbuild":{"Magento_Wishlist/js/wishlist.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery-ui-modules/widget',\r\n    'mage/validation/validation',\r\n    'mage/dataPost'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.wishlist', {\r\n        options: {\r\n            dataAttribute: 'item-id',\r\n            nameFormat: 'qty[{0}]',\r\n            btnRemoveSelector: '[data-role=remove]',\r\n            qtySelector: '[data-role=qty]',\r\n            addToCartSelector: '[data-role=tocart]',\r\n            addAllToCartSelector: '[data-role=all-tocart]',\r\n            commentInputType: 'textarea',\r\n            infoList: false\r\n        },\r\n\r\n        /**\r\n         * Bind handlers to events.\r\n         */\r\n        _create: function () {\r\n            var _this = this;\r\n\r\n            if (!this.options.infoList) {\r\n                this.element\r\n                    .on('addToCart', function (event, context) {\r\n                        var urlParams;\r\n\r\n                        event.stopPropagation(event);\r\n                        $(context).data('stop-processing', true);\r\n                        urlParams = _this._getItemsToCartParams(\r\n                            $(context).parents('[data-row=product-item]').find(_this.options.addToCartSelector)\r\n                        );\r\n                        $.mage.dataPost().postData(urlParams);\r\n\r\n                        return false;\r\n                    })\r\n                    .on('click', this.options.btnRemoveSelector, $.proxy(function (event) {\r\n                        event.preventDefault();\r\n                        $.mage.dataPost().postData($(event.currentTarget).data('post-remove'));\r\n                    }, this))\r\n                    .on('click', this.options.addToCartSelector, $.proxy(this._beforeAddToCart, this))\r\n                    .on('click', this.options.addAllToCartSelector, $.proxy(this._addAllWItemsToCart, this))\r\n                    .on('focusin focusout', this.options.commentInputType, $.proxy(this._focusComment, this));\r\n            }\r\n\r\n            // Setup validation for the form\r\n            this.element.mage('validation', {\r\n                /** @inheritdoc */\r\n                errorPlacement: function (error, element) {\r\n                    error.insertAfter(element.next());\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Process data before add to cart\r\n         *\r\n         * - update item's qty value.\r\n         *\r\n         * @param {Event} event\r\n         * @private\r\n         */\r\n        _beforeAddToCart: function (event) {\r\n            var elem = $(event.currentTarget),\r\n                itemId = elem.data(this.options.dataAttribute),\r\n                qtyName = $.validator.format(this.options.nameFormat, itemId),\r\n                qtyValue = elem.parents().find('[name=\"' + qtyName + '\"]').val(),\r\n                params = elem.data('post');\r\n\r\n            if (params) {\r\n                params.data = $.extend({}, params.data, {\r\n                    'qty': qtyValue\r\n                });\r\n                elem.data('post', params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add wish list items to cart.\r\n         * @private\r\n         * @param {jQuery} elem - clicked 'add to cart' button\r\n         */\r\n        _getItemsToCartParams: function (elem) {\r\n            var itemId, url, qtyName, qtyValue;\r\n\r\n            if (elem.data(this.options.dataAttribute)) {\r\n                itemId = elem.data(this.options.dataAttribute);\r\n                url = this.options.addToCartUrl;\r\n                qtyName = $.validator.format(this.options.nameFormat, itemId);\r\n                qtyValue = elem.parents().find('[name=\"' + qtyName + '\"]').val();\r\n                url.data.item = itemId;\r\n                url.data.qty = qtyValue;\r\n\r\n                return url;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add all wish list items to cart\r\n         * @private\r\n         */\r\n        _addAllWItemsToCart: function () {\r\n            var urlParams = this.options.addAllToCartUrl,\r\n                separator = urlParams.action.indexOf('?') >= 0 ? '&' : '?';\r\n\r\n            this.element.find(this.options.qtySelector).each(function (index, element) {\r\n                urlParams.action += separator + $(element).prop('name') + '=' + encodeURIComponent($(element).val());\r\n                separator = '&';\r\n            });\r\n            $.mage.dataPost().postData(urlParams);\r\n        },\r\n\r\n        /**\r\n         * Toggle comment string.\r\n         * @private\r\n         * @param {Event} e\r\n         */\r\n        _focusComment: function (e) {\r\n            var commentInput = e.currentTarget;\r\n\r\n            if (commentInput.value === '' || commentInput.value === this.options.commentString) {\r\n                commentInput.value = commentInput.value === this.options.commentString ?\r\n                    '' : this.options.commentString;\r\n            }\r\n        }\r\n    });\r\n\r\n    // Extension for mage.wishlist - Select All checkbox\r\n    $.widget('mage.wishlist', $.mage.wishlist, {\r\n        options: {\r\n            selectAllCheckbox: '#select-all',\r\n            parentContainer: '#wishlist-table'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var selectAllCheckboxParent, checkboxCount;\r\n\r\n            this._super();\r\n            selectAllCheckboxParent = $(this.options.selectAllCheckbox).parents(this.options.parentContainer);\r\n            checkboxCount = selectAllCheckboxParent\r\n                .find('input:checkbox:not(' + this.options.selectAllCheckbox + ')').length;\r\n            // If Select all checkbox is checked, check all item checkboxes, if unchecked, uncheck all item checkboxes\r\n            $(this.options.selectAllCheckbox).on('click', function () {\r\n                selectAllCheckboxParent.find('input:checkbox').attr('checked', $(this).is(':checked'));\r\n            });\r\n            // If all item checkboxes are checked, check select all checkbox,\r\n            // if not all item checkboxes are checked, uncheck select all checkbox\r\n            selectAllCheckboxParent.on(\r\n                'click',\r\n                'input:checkbox:not(' + this.options.selectAllCheckbox + ')',\r\n                $.proxy(function () {\r\n                    var checkedCount = selectAllCheckboxParent\r\n                        .find('input:checkbox:checked:not(' + this.options.selectAllCheckbox + ')').length;\r\n\r\n                    $(this.options.selectAllCheckbox).attr('checked', checkboxCount === checkedCount);\r\n                }, this)\r\n            );\r\n        }\r\n    });\r\n    // Extension for mage.wishlist info add to cart\r\n    $.widget('mage.wishlist', $.mage.wishlist, {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._super();\r\n\r\n            if (this.options.infoList) {\r\n                this.element.on('addToCart', $.proxy(function (event, context) {\r\n                    this.element.find('input:checkbox').attr('checked', false);\r\n                    $(context).closest('tr').find('input:checkbox').attr('checked', true);\r\n                    this.element.submit();\r\n                }, this));\r\n                this._checkBoxValidate();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * validate checkbox selection.\r\n         * @private\r\n         */\r\n        _checkBoxValidate: function () {\r\n            this.element.validation({\r\n                submitHandler: $.proxy(function (form) {\r\n                    if ($(form).find('input:checkbox:checked').length) {\r\n                        form.submit();\r\n                    } else {\r\n                        alert({\r\n                            content: this.options.checkBoxValidationMessage\r\n                        });\r\n                    }\r\n                }, this)\r\n            });\r\n        }\r\n    });\r\n\r\n    // Extension for mage.wishlist - Add Wishlist item to Gift Registry\r\n    $.widget('mage.wishlist', $.mage.wishlist, {\r\n        options: {\r\n            formTmplSelector: '#form-tmpl',\r\n            formTmplId: '#wishlist-hidden-form'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var _this = this;\r\n\r\n            this._super();\r\n            this.element.on('click', '[data-wishlist-to-giftregistry]', function () {\r\n                var json = $(this).data('wishlist-to-giftregistry'),\r\n                    tmplJson = {\r\n                        item: json.itemId,\r\n                        entity: json.entity,\r\n                        url: json.url\r\n                    },\r\n                    html = mageTemplate(_this.options.formTmplSelector, {\r\n                        data: tmplJson\r\n                    });\r\n\r\n                $(html).appendTo('body');\r\n                $(_this.options.formTmplId).submit();\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.wishlist;\r\n});\r\n","Magento_Wishlist/js/search.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.wishlistSearch', {\r\n\r\n        /**\r\n         * Bind handlers to events\r\n         */\r\n        _create: function () {\r\n            this.element.on('change', $.proxy(this._toggleForm, this));\r\n        },\r\n\r\n        /**\r\n         * Toggle Form\r\n         * @private\r\n         */\r\n        _toggleForm: function () {\r\n            switch (this.element.val()) {\r\n                case 'name':\r\n                    $(this.options.emailFormSelector).hide();\r\n                    $(this.options.nameFormSelector).show();\r\n                    break;\r\n\r\n                case 'email':\r\n                    $(this.options.nameFormSelector).hide();\r\n                    $(this.options.emailFormSelector).show();\r\n                    break;\r\n                default:\r\n                    $(this.options.emailFormSelector).add(this.options.nameFormSelector).hide();\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.wishlistSearch;\r\n});\r\n","Magento_Wishlist/js/add-to-wishlist.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.addToWishlist', {\r\n        options: {\r\n            bundleInfo: 'div.control [name^=bundle_option]',\r\n            configurableInfo: '.super-attribute-select',\r\n            groupedInfo: '#super-product-table input',\r\n            downloadableInfo: '#downloadable-links-list input',\r\n            customOptionsInfo: '.product-custom-option',\r\n            qtyInfo: '#qty',\r\n            actionElement: '[data-action=\"add-to-wishlist\"]'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var options = this.options,\r\n                dataUpdateFunc = '_updateWishlistData',\r\n                validateProductQty = '_validateWishlistQty',\r\n                changeCustomOption = 'change ' + options.customOptionsInfo,\r\n                changeQty = 'change ' + options.qtyInfo,\r\n                updateWishlist = 'click ' + options.actionElement,\r\n                events = {},\r\n                key;\r\n\r\n            if ('productType' in options) {\r\n                if (typeof options.productType === 'string') {\r\n                    options.productType = [options.productType];\r\n                }\r\n            } else {\r\n                options.productType = [];\r\n            }\r\n\r\n            events[changeCustomOption] = dataUpdateFunc;\r\n            events[changeQty] = dataUpdateFunc;\r\n            events[updateWishlist] = validateProductQty;\r\n\r\n            for (key in options.productType) {\r\n                if (options.productType.hasOwnProperty(key) && options.productType[key] + 'Info' in options) {\r\n                    events['change ' + options[options.productType[key] + 'Info']] = dataUpdateFunc;\r\n                }\r\n            }\r\n            this._on(events);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _updateWishlistData: function (event) {\r\n            var dataToAdd = {},\r\n                isFileUploaded = false,\r\n                self = this;\r\n\r\n            if (event.handleObj.selector == this.options.qtyInfo) { //eslint-disable-line eqeqeq\r\n                this._updateAddToWishlistButton({});\r\n                event.stopPropagation();\r\n\r\n                return;\r\n            }\r\n            $(event.handleObj.selector).each(function (index, element) {\r\n                if ($(element).is('input[type=text]') ||\r\n                    $(element).is('input[type=email]') ||\r\n                    $(element).is('input[type=number]') ||\r\n                    $(element).is('input[type=hidden]') ||\r\n                    $(element).is('input[type=checkbox]:checked') ||\r\n                    $(element).is('input[type=radio]:checked') ||\r\n                    $(element).is('textarea') ||\r\n                    $('#' + element.id + ' option:selected').length\r\n                ) {\r\n                    if ($(element).data('selector') || $(element).attr('name')) {\r\n                        dataToAdd = $.extend({}, dataToAdd, self._getElementData(element));\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                if ($(element).is('input[type=file]') && $(element).val()) {\r\n                    isFileUploaded = true;\r\n                }\r\n            });\r\n\r\n            if (isFileUploaded) {\r\n                this.bindFormSubmit();\r\n            }\r\n            this._updateAddToWishlistButton(dataToAdd);\r\n            event.stopPropagation();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} dataToAdd\r\n         * @private\r\n         */\r\n        _updateAddToWishlistButton: function (dataToAdd) {\r\n            var self = this;\r\n\r\n            $('[data-action=\"add-to-wishlist\"]').each(function (index, element) {\r\n                var params = $(element).data('post');\r\n\r\n                if (!params) {\r\n                    params = {\r\n                        'data': {}\r\n                    };\r\n                }\r\n\r\n                params.data = $.extend({}, params.data, dataToAdd, {\r\n                    'qty': $(self.options.qtyInfo).val()\r\n                });\r\n                $(element).data('post', params);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} array1\r\n         * @param {Object} array2\r\n         * @return {Object}\r\n         * @private\r\n         * @deprecated\r\n         */\r\n        _arrayDiffByKeys: function (array1, array2) {\r\n            var result = {};\r\n\r\n            $.each(array1, function (key, value) {\r\n                if (key.indexOf('option') === -1) {\r\n                    return;\r\n                }\r\n\r\n                if (!array2[key]) {\r\n                    result[key] = value;\r\n                }\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _getElementData: function (element) {\r\n            var data, elementName, elementValue;\r\n\r\n            element = $(element);\r\n            data = {};\r\n            elementName = element.data('selector') ? element.data('selector') : element.attr('name');\r\n            elementValue = element.val();\r\n\r\n            if (element.is('select[multiple]') && elementValue !== null) {\r\n                if (elementName.substr(elementName.length - 2) == '[]') { //eslint-disable-line eqeqeq\r\n                    elementName = elementName.substring(0, elementName.length - 2);\r\n                }\r\n                $.each(elementValue, function (key, option) {\r\n                    data[elementName + '[' + option + ']'] = option;\r\n                });\r\n            } else if (elementName.substr(elementName.length - 2) == '[]') { //eslint-disable-line eqeqeq, max-depth\r\n                elementName = elementName.substring(0, elementName.length - 2);\r\n\r\n                data[elementName + '[' + elementValue + ']'] = elementValue;\r\n            } else {\r\n                data[elementName] = elementValue;\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} params\r\n         * @param {Object} dataToAdd\r\n         * @private\r\n         * @deprecated\r\n         */\r\n        _removeExcessiveData: function (params, dataToAdd) {\r\n            var dataToRemove = this._arrayDiffByKeys(params.data, dataToAdd);\r\n\r\n            $.each(dataToRemove, function (key) {\r\n                delete params.data[key];\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Bind form submit.\r\n         */\r\n        bindFormSubmit: function () {\r\n            var self = this;\r\n\r\n            $('[data-action=\"add-to-wishlist\"]').on('click', function (event) {\r\n                var element, params, form, action;\r\n\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n\r\n                element = $('input[type=file]' + self.options.customOptionsInfo);\r\n                params = $(event.currentTarget).data('post');\r\n                form = $(element).closest('form');\r\n                action = params.action;\r\n\r\n                if (params.data.id) {\r\n                    $('<input>', {\r\n                        type: 'hidden',\r\n                        name: 'id',\r\n                        value: params.data.id\r\n                    }).appendTo(form);\r\n                }\r\n\r\n                if (params.data.uenc) {\r\n                    action += 'uenc/' + params.data.uenc;\r\n                }\r\n\r\n                $(form).attr('action', action).submit();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Validate product quantity before updating Wish List\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _validateWishlistQty: function (event) {\r\n            var element = $(this.options.qtyInfo);\r\n\r\n            if (!(element.validation() && element.validation('isValid'))) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                return;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.addToWishlist;\r\n});\r\n","Magento_Wishlist/js/product/addtowishlist-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/uenc-processor',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Element, uencProcessor, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            label: ''\r\n        },\r\n\r\n        /**\r\n         * Get request POST data.\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getDataPost: function (row) {\r\n            return uencProcessor(row['extension_attributes']['wishlist_button'].url);\r\n        },\r\n\r\n        /**\r\n         * Check if component must be shown.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'add_to_wishlist', 'show_buttons');\r\n        },\r\n\r\n        /**\r\n         * Get button label.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Wishlist/js/view/wishlist.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'Magento_Customer/js/customer-data'\r\n], function (Component, customerData) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.wishlist = customerData.get('wishlist');\r\n        }\r\n    });\r\n});\r\n","Magento_ProductVideo/js/load-player.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n @version 0.0.1\r\n @requires jQuery & jQuery UI\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var videoRegister = {\r\n        _register: {},\r\n\r\n        /**\r\n         * Checks, if api is already registered\r\n         *\r\n         * @param {String} api\r\n         * @returns {bool}\r\n         */\r\n        isRegistered: function (api) {\r\n            return this._register[api] !== undefined;\r\n        },\r\n\r\n        /**\r\n         * Checks, if api is loaded\r\n         *\r\n         * @param {String} api\r\n         * @returns {bool}\r\n         */\r\n        isLoaded: function (api) {\r\n            return this._register[api] !== undefined && this._register[api] === true;\r\n        },\r\n\r\n        /**\r\n         * Register new video api\r\n         * @param {String} api\r\n         * @param {bool} loaded\r\n         */\r\n        register: function (api, loaded) {\r\n            loaded = loaded || false;\r\n            this._register[api] = loaded;\r\n        }\r\n    };\r\n\r\n    $.widget('mage.productVideoLoader', {\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            switch (this.element.data('type')) {\r\n                case 'youtube':\r\n                    this.element.videoYoutube();\r\n                    this._player = this.element.data('mageVideoYoutube');\r\n                    break;\r\n\r\n                case 'vimeo':\r\n                    this.element.videoVimeo();\r\n                    this._player = this.element.data('mageVideoVimeo');\r\n                    break;\r\n                default:\r\n                    throw {\r\n                        name: 'Video Error',\r\n                        message: 'Unknown video type',\r\n\r\n                        /**\r\n                         * join name with message\r\n                         */\r\n                        toString: function () {\r\n                            return this.name + ': ' + this.message;\r\n                        }\r\n                    };\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes variables\r\n         * @private\r\n         */\r\n        _initialize: function () {\r\n            this._params = this.element.data('params') || {};\r\n            this._code = this.element.data('code');\r\n            this._width = this.element.data('width');\r\n            this._height = this.element.data('height');\r\n            this._autoplay = !!this.element.data('autoplay');\r\n            this._playing = this._autoplay || false;\r\n            this._loop = this.element.data('loop');\r\n            this._rel = this.element.data('related');\r\n            this.useYoutubeNocookie = this.element.data('youtubenocookie') || false;\r\n\r\n            this._responsive = this.element.data('responsive') !== false;\r\n\r\n            if (this._responsive === true) {\r\n                this.element.addClass('responsive');\r\n            }\r\n\r\n            this._calculateRatio();\r\n        },\r\n\r\n        /**\r\n         * Abstract play command\r\n         */\r\n        play: function () {\r\n            this._player.play();\r\n        },\r\n\r\n        /**\r\n         * Abstract pause command\r\n         */\r\n        pause: function () {\r\n            this._player.pause();\r\n        },\r\n\r\n        /**\r\n         * Abstract stop command\r\n         */\r\n        stop: function () {\r\n            this._player.stop();\r\n        },\r\n\r\n        /**\r\n         * Abstract playing command\r\n         */\r\n        playing: function () {\r\n            return this._player.playing();\r\n        },\r\n\r\n        /**\r\n         * Destroyer\r\n         */\r\n        destroy: function () {\r\n            this._player.destroy();\r\n        },\r\n\r\n        /**\r\n         * Calculates ratio for responsive videos\r\n         * @private\r\n         */\r\n        _calculateRatio: function () {\r\n            if (!this._responsive) {\r\n                return;\r\n            }\r\n            this.element.css('paddingBottom', this._height / this._width * 100 + '%');\r\n        }\r\n    });\r\n\r\n    $.widget('mage.videoYoutube', $.mage.productVideoLoader, {\r\n\r\n        /**\r\n         * Initialization of the Youtube widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var self = this;\r\n\r\n            this._initialize();\r\n\r\n            this.element.append('<div/>');\r\n\r\n            this._on(window, {\r\n\r\n                /**\r\n                 * Handle event\r\n                 */\r\n                'youtubeapiready': function () {\r\n                    var host = 'https://www.youtube.com';\r\n\r\n                    if (self.useYoutubeNocookie) {\r\n                        host = 'https://www.youtube-nocookie.com';\r\n                    }\r\n\r\n                    if (self._player !== undefined) {\r\n                        return;\r\n                    }\r\n                    self._autoplay = true;\r\n\r\n                    if (self._autoplay) {\r\n                        self._params.autoplay = 1;\r\n                    }\r\n\r\n                    if (!self._rel) {\r\n                        self._params.rel = 0;\r\n                    }\r\n\r\n                    self._player = new window.YT.Player(self.element.children(':first')[0], {\r\n                        height: self._height,\r\n                        width: self._width,\r\n                        videoId: self._code,\r\n                        playerVars: self._params,\r\n                        host: host,\r\n                        events: {\r\n\r\n                            /**\r\n                             * Get duration\r\n                             */\r\n                            'onReady': function onPlayerReady() {\r\n                                self._player.getDuration();\r\n                                self.element.closest('.fotorama__stage__frame')\r\n                                    .addClass('fotorama__product-video--loaded');\r\n                            },\r\n\r\n                            /**\r\n                             * Event observer\r\n                             */\r\n                            onStateChange: function (data) {\r\n                                switch (window.parseInt(data.data, 10)) {\r\n                                    case 1:\r\n                                        self._playing = true;\r\n                                        break;\r\n                                    default:\r\n                                        self._playing = false;\r\n                                        break;\r\n                                }\r\n\r\n                                self._trigger('statechange', {}, data);\r\n\r\n                                if (data.data === window.YT.PlayerState.ENDED && self._loop) {\r\n                                    self._player.playVideo();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    });\r\n                }\r\n            });\r\n\r\n            this._loadApi();\r\n        },\r\n\r\n        /**\r\n         * Loads Youtube API and triggers event, when loaded\r\n         * @private\r\n         */\r\n        _loadApi: function () {\r\n            var element,\r\n                scriptTag;\r\n\r\n            if (videoRegister.isRegistered('youtube')) {\r\n                if (videoRegister.isLoaded('youtube')) {\r\n                    $(window).trigger('youtubeapiready');\r\n                }\r\n\r\n                return;\r\n            }\r\n            videoRegister.register('youtube');\r\n\r\n            element = document.createElement('script');\r\n            scriptTag = document.getElementsByTagName('script')[0];\r\n\r\n            element.async = true;\r\n            element.src = 'https://www.youtube.com/iframe_api';\r\n            scriptTag.parentNode.insertBefore(element, scriptTag);\r\n\r\n            /**\r\n             * Event observe and handle\r\n             */\r\n            window.onYouTubeIframeAPIReady = function () {\r\n                $(window).trigger('youtubeapiready');\r\n                videoRegister.register('youtube', true);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Play command for Youtube\r\n         */\r\n        play: function () {\r\n            this._player.playVideo();\r\n            this._playing = true;\r\n        },\r\n\r\n        /**\r\n         * Pause command for Youtube\r\n         */\r\n        pause: function () {\r\n            this._player.pauseVideo();\r\n            this._playing = false;\r\n        },\r\n\r\n        /**\r\n         * Stop command for Youtube\r\n         */\r\n        stop: function () {\r\n            this._player.stopVideo();\r\n            this._playing = false;\r\n        },\r\n\r\n        /**\r\n         * Playing command for Youtube\r\n         */\r\n        playing: function () {\r\n            return this._playing;\r\n        },\r\n\r\n        /**\r\n         * stops and unloads player\r\n         * @private\r\n         */\r\n        destroy: function () {\r\n            this.stop();\r\n            this._player.destroy();\r\n        }\r\n    });\r\n\r\n    $.widget('mage.videoVimeo', $.mage.productVideoLoader, {\r\n\r\n        /**\r\n         * Initialize the Vimeo widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var timestamp,\r\n                additionalParams = '',\r\n                src;\r\n\r\n            this._initialize();\r\n            timestamp = new Date().getTime();\r\n            this._autoplay = true;\r\n\r\n            if (this._autoplay) {\r\n                additionalParams += '&autoplay=1';\r\n            }\r\n\r\n            if (this._loop) {\r\n                additionalParams += '&loop=1';\r\n            }\r\n            src = 'https://player.vimeo.com/video/' +\r\n                this._code + '?api=1&player_id=vimeo' +\r\n                this._code +\r\n                timestamp +\r\n                additionalParams;\r\n            this.element.append(\r\n                $('<iframe/>')\r\n                    .attr('frameborder', 0)\r\n                    .attr('id', 'vimeo' + this._code + timestamp)\r\n                    .attr('width', this._width)\r\n                    .attr('height', this._height)\r\n                    .attr('src', src)\r\n                    .attr('webkitallowfullscreen', '')\r\n                    .attr('mozallowfullscreen', '')\r\n                    .attr('allowfullscreen', '')\r\n                    .attr('referrerPolicy', 'origin')\r\n                    .attr('allow', 'autoplay')\r\n            );\r\n            this._player = window.$f(this.element.children(':first')[0]);\r\n\r\n            // Froogaloop throws error without a registered ready event\r\n            this._player.addEvent('ready', function (id) {\r\n                $('#' + id).closest('.fotorama__stage__frame').addClass('fotorama__product-video--loaded');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Play command for Vimeo\r\n         */\r\n        play: function () {\r\n            this._player.api('play');\r\n            this._playing = true;\r\n        },\r\n\r\n        /**\r\n         * Pause command for Vimeo\r\n         */\r\n        pause: function () {\r\n            this._player.api('pause');\r\n            this._playing = false;\r\n        },\r\n\r\n        /**\r\n         * Stop command for Vimeo\r\n         */\r\n        stop: function () {\r\n            this._player.api('unload');\r\n            this._playing = false;\r\n        },\r\n\r\n        /**\r\n         * Playing command for Vimeo\r\n         */\r\n        playing: function () {\r\n            return this._playing;\r\n        }\r\n    });\r\n});\r\n","Magento_ProductVideo/js/fotorama-add-video-events.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'catalogGallery',\r\n    'loadPlayer'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var allowBase = true; //global var is needed because fotorama always fully reloads events in case of fullscreen\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseHref(href) {\r\n        var a = document.createElement('a');\r\n\r\n        a.href = href;\r\n\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseURL(href, forceVideo) {\r\n        var id,\r\n            type,\r\n            ampersandPosition,\r\n            vimeoRegex,\r\n            useYoutubeNocookie = false;\r\n\r\n        /**\r\n         * Get youtube ID\r\n         * @param {String} srcid\r\n         * @returns {{}}\r\n         */\r\n        function _getYoutubeId(srcid) {\r\n            if (srcid) {\r\n                ampersandPosition = srcid.indexOf('&');\r\n\r\n                if (ampersandPosition === -1) {\r\n                    return srcid;\r\n                }\r\n\r\n                srcid = srcid.substring(0, ampersandPosition);\r\n            }\r\n\r\n            return srcid;\r\n        }\r\n\r\n        if (typeof href !== 'string') {\r\n            return href;\r\n        }\r\n\r\n        href = parseHref(href);\r\n\r\n        if (href.host.match(/youtube\\.com/) && href.search) {\r\n            id = href.search.split('v=')[1];\r\n\r\n            if (id) {\r\n                id = _getYoutubeId(id);\r\n                type = 'youtube';\r\n            }\r\n        } else if (href.host.match(/youtube\\.com|youtu\\.be|youtube-nocookie.com/)) {\r\n            id = href.pathname.replace(/^\\/(embed\\/|v\\/)?/, '').replace(/\\/.*/, '');\r\n            type = 'youtube';\r\n\r\n            if (href.host.match(/youtube-nocookie.com/)) {\r\n                useYoutubeNocookie = true;\r\n            }\r\n        } else if (href.host.match(/vimeo\\.com/)) {\r\n            type = 'vimeo';\r\n            vimeoRegex = new RegExp(['https?:\\\\/\\\\/(?:www\\\\.|player\\\\.)?vimeo.com\\\\/(?:channels\\\\/(?:\\\\w+\\\\/)',\r\n                '?|groups\\\\/([^\\\\/]*)\\\\/videos\\\\/|album\\\\/(\\\\d+)\\\\/video\\\\/|video\\\\/|)(\\\\d+)(?:$|\\\\/|\\\\?)'\r\n            ].join(''));\r\n            id = href.href.match(vimeoRegex)[3];\r\n        }\r\n\r\n        if ((!id || !type) && forceVideo) {\r\n            id = href.href;\r\n            type = 'custom';\r\n        }\r\n\r\n        return id ? {\r\n            id: id, type: type, s: href.search.replace(/^\\?/, ''), useYoutubeNocookie: useYoutubeNocookie\r\n        } : false;\r\n    }\r\n\r\n    //create AddFotoramaVideoEvents widget\r\n    $.widget('mage.AddFotoramaVideoEvents', {\r\n        options: {\r\n            videoData: '',\r\n            videoSettings: '',\r\n            optionsVideoData: '',\r\n            dataMergeStrategy: 'replace',\r\n            vimeoJSFrameworkLoaded: false\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        onVimeoJSFramework: function () {},\r\n        defaultVideoData: [],\r\n        PV: 'product-video', // [CONST]\r\n        VU: 'video-unplayed',\r\n        PVLOADED: 'fotorama__product-video--loaded', // [CONST]\r\n        PVLOADING: 'fotorama__product-video--loading', // [CONST]\r\n        VID: 'video', // [CONST]\r\n        VI: 'vimeo', // [CONST]\r\n        FTVC: 'fotorama__video-close',\r\n        FTAR: 'fotorama__arr',\r\n        fotoramaSpinner: 'fotorama__spinner',\r\n        fotoramaSpinnerShow: 'fotorama__spinner--show',\r\n        TI: 'video-thumb-icon',\r\n        isFullscreen: false,\r\n        FTCF: '[data-gallery-role=\"fotorama__fullscreen-icon\"]',\r\n        Base: 0, //on check for video is base this setting become true if there is any video with base role\r\n        MobileMaxWidth: 767,\r\n        GP: 'gallery-placeholder', //gallery placeholder class is needed to find and erase <script> tag\r\n        videoData: null,\r\n        videoDataPlaceholder: [{\r\n            id: '',\r\n            isBase: true,\r\n            mediaType: 'image',\r\n            provider: ''\r\n        }],\r\n\r\n        /**\r\n         * Creates widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            $(this.element).on('gallery:loaded',  $.proxy(function () {\r\n                this.fotoramaItem = $(this.element).find('.fotorama-item');\r\n                this._initialize();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _initialize: function () {\r\n            if (!this.defaultVideoData.length) {\r\n                this.defaultVideoData = this.options.videoData;\r\n            }\r\n\r\n            // If product does not have images, no video data generated,\r\n            // but for configurable product we still need a video data, in case of 'prepend' gallery strategy.\r\n            if (!this.defaultVideoData.length && !this.options.videoData.length) {\r\n                this.defaultVideoData = this.options.videoData = this.videoDataPlaceholder;\r\n            }\r\n\r\n            this.clearEvents();\r\n\r\n            if (this._checkForVideoExist()) {\r\n                this._checkFullscreen();\r\n                this._listenForFullscreen();\r\n                this._checkForVimeo();\r\n                this._isVideoBase();\r\n                this._initFotoramaVideo();\r\n                this._attachFotoramaEvents();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear gallery events to prevent duplicated calls.\r\n         *\r\n         * @private\r\n         */\r\n        clearEvents: function () {\r\n            if (this.fotoramaItem !== undefined) {\r\n                this.fotoramaItem.off(\r\n                    'fotorama:show.' + this.PV +\r\n                    ' fotorama:showend.' + this.PV +\r\n                    ' fotorama:fullscreenenter.' + this.PV +\r\n                    ' fotorama:fullscreenexit.' + this.PV\r\n                );\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} options\r\n         * @private\r\n         */\r\n        _setOptions: function (options) {\r\n            if (options.videoData && options.videoData.length) {\r\n                this.options.videoData = options.videoData;\r\n            }\r\n\r\n            this._loadVideoData(options);\r\n            this._initialize();\r\n        },\r\n\r\n        /**\r\n         * Set video data for configurable product.\r\n         *\r\n         * @param {Object} options\r\n         * @private\r\n         */\r\n        _loadVideoData: function (options) {\r\n            if (options.selectedOption) {\r\n                if (options.dataMergeStrategy === 'prepend') {\r\n                    this.options.videoData = [].concat(\r\n                        this.options.optionsVideoData[options.selectedOption],\r\n                        this.defaultVideoData\r\n                    );\r\n                } else {\r\n                    this.options.videoData = this.options.optionsVideoData[options.selectedOption];\r\n                }\r\n            } else {\r\n                this.options.videoData = this.defaultVideoData;\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _checkFullscreen: function () {\r\n            if (this.fotoramaItem.data('fotorama').fullScreen || false) {\r\n                this.isFullscreen = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _listenForFullscreen: function () {\r\n            this.fotoramaItem.on('fotorama:fullscreenenter.' + this.PV, $.proxy(function () {\r\n                this.isFullscreen = true;\r\n            }, this));\r\n\r\n            this.fotoramaItem.on('fotorama:fullscreenexit.' + this.PV, $.proxy(function () {\r\n                this.isFullscreen = false;\r\n                this._hideVideoArrows();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} inputData\r\n         * @param {bool} isJSON\r\n         * @returns {{}}\r\n         * @private\r\n         */\r\n        _createVideoData: function (inputData, isJSON) {\r\n            var videoData = [],\r\n                dataUrl,\r\n                tmpVideoData,\r\n                tmpInputData,\r\n                i;\r\n\r\n            if (isJSON) {\r\n                inputData = $.parseJSON(inputData);\r\n            }\r\n\r\n            for (i = 0; i < inputData.length; i++) {\r\n                tmpInputData = inputData[i];\r\n                dataUrl = '';\r\n                tmpVideoData = {\r\n                    mediaType: '',\r\n                    isBase: '',\r\n                    id: '',\r\n                    provider: ''\r\n                };\r\n                tmpVideoData.mediaType = this.VID;\r\n\r\n                if (tmpInputData.mediaType !== 'external-video') {\r\n                    tmpVideoData.mediaType = tmpInputData.mediaType;\r\n                }\r\n\r\n                tmpVideoData.isBase = tmpInputData.isBase;\r\n\r\n                if (tmpInputData.videoUrl && tmpInputData.videoUrl !== null) {\r\n                    dataUrl = tmpInputData.videoUrl;\r\n                    dataUrl = parseURL(dataUrl);\r\n                    tmpVideoData.id = dataUrl.id;\r\n                    tmpVideoData.provider = dataUrl.type;\r\n                    tmpVideoData.videoUrl = tmpInputData.videoUrl;\r\n                    tmpVideoData.useYoutubeNocookie = dataUrl.useYoutubeNocookie;\r\n                }\r\n\r\n                videoData.push(tmpVideoData);\r\n            }\r\n\r\n            return videoData;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} fotorama\r\n         * @param {bool} isBase\r\n         * @private\r\n         */\r\n        _createCloseVideo: function (fotorama, isBase) {\r\n            var closeVideo;\r\n\r\n            this.fotoramaItem.find('.' + this.FTVC).remove();\r\n            this.fotoramaItem.append('<div class=\"' + this.FTVC + '\"></div>');\r\n            this.fotoramaItem.css('position', 'relative');\r\n            closeVideo = this.fotoramaItem.find('.' + this.FTVC);\r\n            this._closeVideoSetEvents(closeVideo, fotorama);\r\n\r\n            if (\r\n                isBase &&\r\n                this.options.videoData[fotorama.activeIndex].isBase &&\r\n                $(window).width() > this.MobileMaxWidth) {\r\n                this._showCloseVideo();\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _hideCloseVideo: function () {\r\n            this.fotoramaItem\r\n                .find('.' + this.FTVC)\r\n                .removeClass('fotorama-show-control');\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _showCloseVideo: function () {\r\n            this.fotoramaItem\r\n                .find('.' + this.FTVC)\r\n                .addClass('fotorama-show-control');\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {jQuery} $closeVideo\r\n         * @param {jQuery} fotorama\r\n         * @private\r\n         */\r\n        _closeVideoSetEvents: function ($closeVideo, fotorama) {\r\n            $closeVideo.on('click', $.proxy(function () {\r\n                this._unloadVideoPlayer(fotorama.activeFrame.$stageFrame.parent(), fotorama, true);\r\n                this._hideCloseVideo();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {Boolean}\r\n         * @private\r\n         */\r\n        _checkForVideoExist: function () {\r\n            var key, result, checker, videoSettings;\r\n\r\n            if (!this.options.videoData) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.options.videoSettings) {\r\n                return false;\r\n            }\r\n\r\n            result = this._createVideoData(this.options.videoData, false);\r\n            checker = false;\r\n            videoSettings = this.options.videoSettings[0];\r\n            videoSettings.playIfBase = parseInt(videoSettings.playIfBase, 10);\r\n            videoSettings.showRelated = parseInt(videoSettings.showRelated, 10);\r\n            videoSettings.videoAutoRestart = parseInt(videoSettings.videoAutoRestart, 10);\r\n\r\n            for (key in result) {\r\n                if (result[key].mediaType === this.VID) {\r\n                    checker = true;\r\n                }\r\n            }\r\n\r\n            if (checker) {\r\n                this.options.videoData = result;\r\n            }\r\n\r\n            return checker;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _checkForVimeo: function () {\r\n            var allVideoData = this.options.videoData,\r\n                videoItem;\r\n\r\n            if (window.Froogaloop) { // prevent duplicated initialization\r\n                return;\r\n            }\r\n\r\n            for (videoItem in allVideoData) {\r\n                if (allVideoData[videoItem].provider === this.VI) {\r\n                    this._loadVimeoJSFramework();\r\n\r\n                    return;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _isVideoBase: function () {\r\n            var allVideoData = this.options.videoData,\r\n                videoItem,\r\n                allVideoDataKeys,\r\n                key,\r\n                i;\r\n\r\n            allVideoDataKeys = Object.keys(allVideoData);\r\n\r\n            for (i = 0; i < allVideoDataKeys.length; i++) {\r\n                key = allVideoDataKeys[i];\r\n                videoItem = allVideoData[key];\r\n\r\n                if (\r\n                    videoItem.mediaType === this.VID && videoItem.isBase &&\r\n                    this.options.videoSettings[0].playIfBase && allowBase\r\n                ) {\r\n                    this.Base = true;\r\n                    allowBase = false;\r\n                }\r\n            }\r\n\r\n            if (!this.isFullscreen) {\r\n                this._createCloseVideo(this.fotoramaItem.data('fotorama'), this.Base);\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _loadVimeoJSFramework: function () {\r\n            var element = document.createElement('script'),\r\n                scriptTag = document.getElementsByTagName('script')[0];\r\n\r\n            element.async = true;\r\n            element.src = 'https://f.vimeocdn.com/js/froogaloop2.min.js';\r\n\r\n            /**\r\n             * Vimeo js framework on load callback.\r\n             */\r\n            element.onload = function () {\r\n                this.onVimeoJSFramework();\r\n                this.vimeoJSFrameworkLoaded = true;\r\n            }.bind(this);\r\n            scriptTag.parentNode.insertBefore(element, scriptTag);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Event} e\r\n         * @private\r\n         */\r\n        _initFotoramaVideo: function (e) {\r\n            var fotorama = this.fotoramaItem.data('fotorama'),\r\n                thumbsParent,\r\n                thumbs,\r\n                t;\r\n\r\n            if (!fotorama.activeFrame.$navThumbFrame) {\r\n                this.fotoramaItem.on('fotorama:showend.' + this.PV, $.proxy(function (evt, fotoramaData) {\r\n                    $(fotoramaData.activeFrame.$stageFrame).removeAttr('href');\r\n                }, this));\r\n\r\n                this._startPrepareForPlayer(e, fotorama);\r\n\r\n                return null;\r\n            }\r\n\r\n            fotorama.data.map($.proxy(this._setItemType, this));\r\n            thumbsParent = fotorama.activeFrame.$navThumbFrame.parent();\r\n            thumbs = thumbsParent.find('.fotorama__nav__frame:visible');\r\n\r\n            for (t = 0; t < thumbs.length; t++) {\r\n                this._setThumbsIcon(thumbs.eq(t), t);\r\n                this._checkForVideo(e, fotorama, t + 1);\r\n            }\r\n\r\n            this.fotoramaItem.on('fotorama:showend.' + this.PV, $.proxy(function (evt, fotoramaData) {\r\n                $(fotoramaData.activeFrame.$stageFrame).removeAttr('href');\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} elem\r\n         * @param {Number} i\r\n         * @private\r\n         */\r\n        _setThumbsIcon: function (elem, i) {\r\n            var fotorama = this.fotoramaItem.data('fotorama');\r\n\r\n            if (fotorama.options.nav === 'dots' && elem.hasClass(this.TI)) {\r\n                elem.removeClass(this.TI);\r\n            }\r\n\r\n            if (this.options.videoData[i].mediaType === this.VID &&\r\n                fotorama.data[i].type ===  this.VID &&\r\n                fotorama.options.nav === 'thumbs') {\r\n                elem.addClass(this.TI);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Temporary solution with adding types for configurable product items\r\n         *\r\n         * @param {Object} item\r\n         * @param {Number} i\r\n         * @private\r\n         */\r\n        _setItemType: function (item, i) {\r\n            !item.type && (item.type = this.options.videoData[i].mediaType);\r\n        },\r\n\r\n        /**\r\n         * Attach\r\n         *\r\n         * @private\r\n         */\r\n        _attachFotoramaEvents: function () {\r\n            this.fotoramaItem.on('fotorama:showend.' + this.PV, $.proxy(function (e, fotorama) {\r\n                this._startPrepareForPlayer(e, fotorama);\r\n            }, this));\r\n\r\n            this.fotoramaItem.on('fotorama:show.' + this.PV, $.proxy(function (e, fotorama) {\r\n                this._unloadVideoPlayer(fotorama.activeFrame.$stageFrame.parent(), fotorama, true);\r\n            }, this));\r\n\r\n            this.fotoramaItem.on('fotorama:fullscreenexit.' + this.PV, $.proxy(function (e, fotorama) {\r\n                fotorama.activeFrame.$stageFrame.find('.' + this.PV).remove();\r\n                this._startPrepareForPlayer(e, fotorama);\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Start prepare for player\r\n         *\r\n         * @param {Event} e\r\n         * @param {jQuery} fotorama\r\n         * @private\r\n         */\r\n        _startPrepareForPlayer: function (e, fotorama) {\r\n            this._unloadVideoPlayer(fotorama.activeFrame.$stageFrame.parent(), fotorama, false);\r\n            this._checkForVideo(e, fotorama, fotorama.activeFrame.i);\r\n            this._checkForVideo(e, fotorama, fotorama.activeFrame.i - 1);\r\n            this._checkForVideo(e, fotorama, fotorama.activeFrame.i + 1);\r\n        },\r\n\r\n        /**\r\n         * Check for video\r\n         *\r\n         * @param {Event} e\r\n         * @param {jQuery} fotorama\r\n         * @param {Number} number\r\n         * @private\r\n         */\r\n        _checkForVideo: function (e, fotorama, number) {\r\n            var videoData = this.options.videoData[number - 1],\r\n                $image = fotorama.data[number - 1];\r\n\r\n            if ($image) {\r\n                !$image.type && this._setItemType($image, number - 1);\r\n\r\n                if ($image.type === 'image') {\r\n                    $image.$navThumbFrame && $image.$navThumbFrame.removeClass(this.TI);\r\n                    this._hideCloseVideo();\r\n\r\n                    return;\r\n                } else if ($image.$navThumbFrame && $image.type === 'video') {\r\n                    !$image.$navThumbFrame.hasClass(this.TI) && $image.$navThumbFrame.addClass(this.TI);\r\n                }\r\n\r\n                $image = $image.$stageFrame;\r\n            }\r\n\r\n            if ($image && videoData && videoData.mediaType === this.VID) {\r\n                $(fotorama.activeFrame.$stageFrame).removeAttr('href');\r\n                this._prepareForVideoContainer($image, videoData, fotorama, number);\r\n            }\r\n\r\n            if (this.isFullscreen && this.fotoramaItem.data('fotorama').activeFrame.i === number) {\r\n                this.fotoramaItem.data('fotorama').activeFrame.$stageFrame[0].click();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepare for video container\r\n         *\r\n         * @param {jQuery} $image\r\n         * @param {Object} videoData\r\n         * @param {Object} fotorama\r\n         * @param {Number} number\r\n         * @private\r\n         */\r\n        _prepareForVideoContainer: function ($image, videoData, fotorama, number) {\r\n            $image.addClass('fotorama-video-container').addClass(this.VU);\r\n            this._createVideoContainer(videoData, $image);\r\n            this._setVideoEvent($image, this.PV, fotorama, number);\r\n        },\r\n\r\n        /**\r\n         * Create video container\r\n         *\r\n         * @param {Object} videoData\r\n         * @param {jQuery} $image\r\n         * @private\r\n         */\r\n        _createVideoContainer: function (videoData, $image) {\r\n            var videoSettings;\r\n\r\n            videoSettings = this.options.videoSettings[0];\r\n            $image.find('.' + this.PV).remove();\r\n            $image.append(\r\n                '<div class=\"' +\r\n                this.PV +\r\n                '\" data-related=\"' +\r\n                videoSettings.showRelated +\r\n                '\" data-loop=\"' +\r\n                videoSettings.videoAutoRestart +\r\n                '\" data-type=\"' +\r\n                videoData.provider +\r\n                '\" data-code=\"' +\r\n                videoData.id +\r\n                '\"  data-youtubenocookie=\"' +\r\n                videoData.useYoutubeNocookie +\r\n                '\" data-width=\"100%\" data-height=\"100%\"></div>'\r\n            );\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} $image\r\n         * @param {Object} PV\r\n         * @param {Object} fotorama\r\n         * @param {Number} number\r\n         * @private\r\n         */\r\n        _setVideoEvent: function ($image, PV, fotorama, number) {\r\n            $image.find('.magnify-lens').remove();\r\n            $image\r\n                .off('click tap', $.proxy(this._clickHandler, this))\r\n                .on('click tap', $.proxy(this._clickHandler, this));\r\n            this._handleBaseVideo(fotorama, number); //check for video is it base and handle it if it's base\r\n        },\r\n\r\n        /**\r\n         * Hides preview arrows above video player.\r\n         * @private\r\n         */\r\n        _hideVideoArrows: function () {\r\n            var arrows = $('.' + this.FTAR);\r\n\r\n            arrows.removeClass('fotorama__arr--shown');\r\n            arrows.removeClass('fotorama__arr--hidden');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _showLoader: function () {\r\n            var spinner = this.fotoramaItem.find('.' + this.fotoramaSpinner);\r\n\r\n            spinner.addClass(this.fotoramaSpinnerShow);\r\n            this.fotoramaItem.data('fotorama').activeFrame.$stageFrame.addClass(this.PVLOADING);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _hideLoader: function () {\r\n            var spinner = this.fotoramaItem.find('.' + this.fotoramaSpinner);\r\n\r\n            spinner.removeClass(this.fotoramaSpinnerShow);\r\n            this.fotoramaItem.data('fotorama').activeFrame.$stageFrame.removeClass(this.PVLOADING);\r\n        },\r\n\r\n        /**\r\n         * @param {Event} event\r\n         * @private\r\n         */\r\n        _clickHandler: function (event) {\r\n            var type;\r\n\r\n            if ($(event.target).hasClass(this.VU) && $(event.target).find('iframe').length === 0) {\r\n                $(event.target).removeClass(this.VU);\r\n                type = $(event.target).find('.' + this.PV).data('type');\r\n\r\n                if (this.vimeoJSFrameworkLoaded && type === this.VI) {\r\n                    $(event.target).find('.' + this.PV).productVideoLoader();\r\n                } else if (type === this.VI) {\r\n                    this._showLoader();\r\n                    this.onVimeoJSFramework = function () {\r\n                        $(event.target).find('.' + this.PV).productVideoLoader();\r\n                        this._hideLoader();\r\n                    }.bind(this);\r\n                } else {\r\n                    $(event.target).find('.' + this.PV).productVideoLoader();\r\n                }\r\n\r\n                $('.' + this.FTAR).addClass(this.isFullscreen ? 'fotorama__arr--shown' : 'fotorama__arr--hidden');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle base video\r\n         * @param {Object} fotorama\r\n         * @param {Number} srcNumber\r\n         * @private\r\n         */\r\n        _handleBaseVideo: function (fotorama, srcNumber) {\r\n            var waitForFroogaloop,\r\n                videoData = this.options.videoData,\r\n                activeIndex = fotorama.activeIndex,\r\n                number = parseInt(srcNumber, 10),\r\n                activeIndexIsBase = videoData[activeIndex];\r\n\r\n            if (!this.Base) {\r\n                return;\r\n            }\r\n\r\n            if (activeIndexIsBase && number === 1 && $(window).width() > this.MobileMaxWidth) {\r\n                if (this.options.videoData[fotorama.activeIndex].provider === this.VI) {\r\n                    waitForFroogaloop = setInterval($.proxy(function () {\r\n                        if (window.Froogaloop) {\r\n                            clearInterval(waitForFroogaloop);\r\n                            fotorama.requestFullScreen();\r\n                            this.fotoramaItem.data('fotorama').activeFrame.$stageFrame[0].click();\r\n                            this.Base = false;\r\n                        }\r\n                    }, this), 50);\r\n                } else { //if not a vimeo - play it immediately with a little lag in case for fotorama fullscreen\r\n                    setTimeout($.proxy(function () {\r\n                        fotorama.requestFullScreen();\r\n                        this.fotoramaItem.data('fotorama').activeFrame.$stageFrame[0].click();\r\n                        this.Base = false;\r\n                    }, this), 50);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Destroy video player\r\n         * @param {jQuery} $wrapper\r\n         * @param {jQuery} current\r\n         * @param {bool} close\r\n         * @private\r\n         */\r\n        _unloadVideoPlayer: function ($wrapper, current, close) {\r\n            var self = this;\r\n\r\n            if (!$wrapper) {\r\n                return;\r\n            }\r\n\r\n            $wrapper.find('.' + this.PVLOADED).removeClass(this.PVLOADED);\r\n            this._hideLoader();\r\n\r\n            $wrapper.find('.' + this.PV).each(function () {\r\n                var $item = $(this).parent(),\r\n                    cloneVideoDiv,\r\n                    iframeElement = $(this).find('iframe'),\r\n                    currentIndex,\r\n                    itemIndex;\r\n\r\n                if (iframeElement.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                currentIndex = current.activeFrame.$stageFrame.index();\r\n                itemIndex = $item.index();\r\n\r\n                if (currentIndex === itemIndex && !close) {\r\n                    return;\r\n                }\r\n\r\n                if (currentIndex !== itemIndex && close) {\r\n                    return;\r\n                }\r\n\r\n                iframeElement.remove();\r\n                cloneVideoDiv = $(this).clone();\r\n                $(this).remove();\r\n                $item.append(cloneVideoDiv);\r\n                $item.addClass(self.VU);\r\n\r\n                self._hideCloseVideo();\r\n                self._hideVideoArrows();\r\n\r\n                if (self.isFullscreen && !self.fotoramaItem.data('fotorama').options.fullscreen.arrows) {\r\n                    if ($('.' + self.FTAR + '--prev').is(':focus') || $('.' + self.FTAR + '--next').is(':focus')) {\r\n                        $(self.FTCF).focus();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.AddFotoramaVideoEvents;\r\n});\r\n"}
}});
